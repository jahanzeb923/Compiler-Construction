using System;
using System.Collections;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace FirstSets
{
    public partial class Form1 : Form
    {
        Hashtable productionRulez = new Hashtable();
        Hashtable firstSets = new Hashtable();

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            productionRulez.Clear();
            firstSets.Clear();
            bool flag = true;
            var productionRules = richTextBox1.Text.Split('\n');
            foreach (var productionRule in productionRules)
            {
                var temp = productionRule.Split('>');
                if (!productionRulez.Contains(temp[0]))
                {
                    productionRulez.Add(temp[0], temp[1]);
                    var te = temp[0][0];
                    if (!Regex.IsMatch(te.ToString(), @"^[A-Z]$"))
                    {
                        flag = false;
                        MessageBox.Show("Non-terminals can't be small letters");
                    }
                }
                else
                {
                    productionRulez[temp[0]] += "|" + temp[1];
                }
            }
            if (flag)
            {
                foreach (DictionaryEntry rule in productionRulez)
                {
                    var rules = new List<string[]>();
                    var alpha = rule.Value.ToString().Split('|');
                    foreach (var rul in alpha)
                    {
                        rules.Add(rul.Split(' '));
                    }
                    foreach (var rul in rules)
                    {
                        if (!firstSets.Contains(rule.Key))
                        {
                            firstSets.Add(rule.Key, CalculateFirst(rul, 0));
                        }
                        else
                        {
                            firstSets[rule.Key] += "," + CalculateFirst(rul, 0);
                        }
                    }
                }
                foreach (DictionaryEntry x in firstSets)
                {
                    richTextBox2.AppendText("First(" + x.Key.ToString() + ") = " + "{" + x.Value.ToString() + "}\n");
                }
            }
        }

        private string CalculateFirst(string[] alpha, int index)
        {
            if (!productionRulez.Contains(alpha[0]) && alpha[0] != "~")
            {
                return alpha[0];
            }
            else if (alpha[0] != "~" && alpha.Length >= 1)
            {
                string[] beta = null;
                if (productionRulez.Contains(alpha[index]))
                {
                    beta = productionRulez[alpha[index]].ToString().Split(' ');
                }
                else
                {
                    return alpha[index];
                }
                var x = CalculateFirst(beta, index);
                if (x != "~")
                {
                    return x;
                }
                else
                {
                    return CalculateFirst(alpha, index + 1);
                }
            }
            return "~";
        }
    }
}
